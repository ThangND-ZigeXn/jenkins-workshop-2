- hosts: localhost
  gather_facts: no
  vars:
    app_dir: "/usr/share/nginx/html/jenkins/jenkins-workshop-2"
    template_dir: '/usr/share/nginx/html/jenkins/template2'
    deploy_dir: "/usr/share/nginx/html/jenkins/workshop2-deploy"
    max_release: "{{ max_release | default(5) }}"
    project_name: "{{ project_name }}"
    firebase_token: "{{ firebase_token }}"
    google_application_credentials: "{{ google_application_credentials }}"
  tasks:

    - name: Create application directory if don't exist
      shell: |
        mkdir -p "{{ app_dir }}"
        if [ -z "$(ls -A {{ app_dir }})" ]; then
          echo "[INFO] Copy template to application directory"
          cp -r "{{ template_dir }}"/* "{{ app_dir }}"
        fi
      args:
        executable: /bin/bash

    - name: Create new release
      shell: |
        DATE=$(date +"%Y%m%d%H%M%S")
        RELEASE_FOLDER="{{ deploy_dir }}/$DATE"
        echo "[INFO] Creating release folder: $RELEASE_FOLDER"
        mkdir -p "$RELEASE_FOLDER"
        cp "{{ app_dir }}/index.html" "$RELEASE_FOLDER"
        cp "{{ app_dir }}/404.html" "$RELEASE_FOLDER"
        cp -r "{{ app_dir }}/css" "$RELEASE_FOLDER"
        cp -r "{{ app_dir }}/js" "$RELEASE_FOLDER"
        cp -r "{{ app_dir }}/images" "$RELEASE_FOLDER"

        echo "[INFO] Update symlink..."
        ln -sfn "$RELEASE_FOLDER" "{{ deploy_dir }}/current"
        echo "[INFO] Symlink updated -> $(readlink -f {{ deploy_dir }}/current)"
      args:
        executable: /bin/bash

    - name: Clean old releases
      shell: |
        cd "{{ deploy_dir }}"
        TOTAL=$(ls -1dt */ 2>/dev/null | grep -v '^current/$' | wc -l)
        if [ "$TOTAL" -le "{{ max_release }}" ]; then
          echo "[INFO] Tổng số release ($TOTAL) <= {{ max_release }} -> không cần xoá."
        else
          echo "[INFO] Xoá release cũ, giữ lại {{ max_release }} release gần nhất."
          ls -1dt */ | grep -v '^current/$' | tail -n +$(({{ max_release }}+1)) | while read -r old_release; do
            echo " -> Xoá $old_release"
            rm -rf "$old_release"
          done
        fi
      args:
        executable: /bin/bash

    - name: Deploy to Firebase
      shell: |
        cd "{{ app_dir }}"
        if [ -z "$FIREBASE_TOKEN" ]; then
          export GOOGLE_APPLICATION_CREDENTIALS="{{ google_application_credentials }}"
          firebase deploy --only hosting --project="{{ project_name }}"
        else
          firebase deploy --token "$FIREBASE_TOKEN" --only hosting --project="{{ project_name }}"
        fi
      args:
        executable: /bin/bash
